// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  name              String
  email             String?           @unique
  password          String?
  emailVerified     DateTime?         @map("email_verified")
  image             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  accounts          Account[]
  sessions          Session[]
  savedRepositories SavedRepository[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Repository {
  id            String            @id @default(uuid())
  repoId        Int               @unique @map("repo_id")
  owner         String
  name          String
  fullName      String            @unique @map("full_name")
  description   String?           @db.Text
  language      String?
  stars         Int               @default(0)
  forks         Int               @default(0)
  issues        Int               @default(0)
  ownerAvatar   String?           @map("owner_avatar") @db.Text
  topics        String[]
  size          Int               @default(0)
  url           String            @db.Text
  homepage      String?           @db.Text
  license       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  lastFetchedAt DateTime          @default(now()) @map("last_fetched_at")
  savedBy       SavedRepository[]

  @@index([language])
  @@index([stars])
  @@map("repositories")
}

model SavedRepository {
  id          String     @id @default(uuid())
  userId      String     @map("user_id")
  repositoryId String    @map("repository_id")
  notes       String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  repository  Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@index([userId])
  @@map("saved_repositories")
}
